/* This file is automatically generated. DO NOT EDIT! */

#ifndef _sf_triangle_h
#define _sf_triangle_h


#include "_bool.h"


typedef struct sf_Triangle *sf_triangle;
/* abstract data type */


sf_triangle sf_triangle_init (int nbox /* triangle length */, 
			      int ndat /* data length */);
/*< initialize >*/


void sf_smooth (sf_triangle tr  /* smoothing object */, 
		int o, int d    /* trace sampling */, 
		bool der        /* if derivative */, 
		bool box        /* if box filter */,
		float *x        /* data (smoothed in place) */);
/*< apply triangle smoothing >*/


void sf_smooth2 (sf_triangle tr  /* smoothing object */, 
		 int o, int d    /* trace sampling */, 
		 bool der        /* if derivative */,
		 bool box        /* if box filter */,
		 float *x        /* data (smoothed in place) */);
/*< apply adjoint triangle smoothing >*/


void  sf_triangle_close(sf_triangle tr);
/*< free allocated storage >*/

int sf_first_index (int i          /* dimension [0...dim-1] */, 
		    int j        /* line coordinate */, 
		    int dim        /* number of dimensions */, 
		    const int *n /* box size [dim] */, 
		    const int *s /* step [dim] */);

int sf_filedims (sf_file file, /*@out@*/ int *n);

int smooth(float *origin, int nz, int nx, int rectz, int rectx);
#endif
